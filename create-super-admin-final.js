import { createClient } from '@supabase/supabase-js'

const supabaseUrl = 'https://dqoncbnvyviurirsdtyu.supabase.co'
const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImRxb25jYm52eXZpdXJpcnNkdHl1Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQxNzc4NDEsImV4cCI6MjA2OTc1Mzg0MX0.gsvrCIlp0NIaCmssExkbslbJjiZJ_A4u5lD0XG_ncY0'

const supabase = createClient(supabaseUrl, supabaseAnonKey)

console.log('üëë CR√âATION DU SUPER ADMIN')
console.log('=========================\n')

const SUPER_ADMIN_CREDENTIALS = {
  email: 'superadmin@travelhub.cm',
  password: 'SuperAdmin2024!',
  fullName: 'Super Administrateur',
  role: 'super_admin'
}

async function createSuperAdmin() {
  try {
    console.log('üîê Cr√©ation du compte d\'authentification...')
    
    // 1. Cr√©er le compte d'authentification
    const { data: authData, error: authError } = await supabase.auth.signUp({
      email: SUPER_ADMIN_CREDENTIALS.email,
      password: SUPER_ADMIN_CREDENTIALS.password,
      options: {
        data: {
          full_name: SUPER_ADMIN_CREDENTIALS.fullName,
          role: SUPER_ADMIN_CREDENTIALS.role
        }
      }
    })
    
    if (authError && !authError.message.includes('already registered')) {
      console.log('‚ùå Erreur auth:', authError.message)
      return false
    }
    
    const userId = authData.user?.id
    if (!userId) {
      console.log('‚ùå Pas d\'ID utilisateur obtenu')
      return false
    }
    
    console.log('‚úÖ Compte auth cr√©√© avec ID:', userId)
    
    // 2. Cr√©er le profil dans la table users
    console.log('üë§ Cr√©ation du profil utilisateur...')
    
    const { error: profileError } = await supabase
      .from('users')
      .upsert({
        id: userId,
        email: SUPER_ADMIN_CREDENTIALS.email,
        full_name: SUPER_ADMIN_CREDENTIALS.fullName,
        role: SUPER_ADMIN_CREDENTIALS.role,
        is_active: true,
        created_at: new Date().toISOString()
      })
    
    if (profileError) {
      console.log('‚ùå Erreur profil:', profileError.message)
      return false
    }
    
    console.log('‚úÖ Profil utilisateur cr√©√©')
    
    // 3. V√©rifier la cr√©ation
    const { data: verifyUser, error: verifyError } = await supabase
      .from('users')
      .select('*')
      .eq('email', SUPER_ADMIN_CREDENTIALS.email)
      .single()
    
    if (verifyError) {
      console.log('‚ùå Erreur v√©rification:', verifyError.message)
      return false
    }
    
    console.log('‚úÖ V√©rification r√©ussie')
    
    console.log('\nüéâ SUPER ADMIN CR√â√â AVEC SUCC√àS!')
    console.log('===============================')
    console.log('üìß Email:', SUPER_ADMIN_CREDENTIALS.email)
    console.log('üîê Mot de passe:', SUPER_ADMIN_CREDENTIALS.password)
    console.log('üë§ Nom:', SUPER_ADMIN_CREDENTIALS.fullName)
    console.log('üé≠ R√¥le:', SUPER_ADMIN_CREDENTIALS.role)
    console.log('üÜî ID:', userId)
    console.log('')
    console.log('üîß POUVOIRS DU SUPER ADMIN:')
    console.log('‚Ä¢ üëë Acc√®s administrateur complet')
    console.log('‚Ä¢ üè¢ Gestion de toutes les agences')
    console.log('‚Ä¢ üë• Voir tous les utilisateurs')
    console.log('‚Ä¢ ‚úÖ Valider les nouvelles agences')
    console.log('‚Ä¢ üìä Rapports et statistiques globales')
    console.log('‚Ä¢ ‚öôÔ∏è Configuration syst√®me')
    console.log('')
    console.log('‚ú® Vous pouvez maintenant vous connecter!')
    
    return true
    
  } catch (error) {
    console.log('‚ùå Erreur g√©n√©rale:', error.message)
    return false
  }
}

createSuperAdmin()
