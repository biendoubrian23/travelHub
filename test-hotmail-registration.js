import { createClient } from '@supabase/supabase-js'

const supabaseUrl = 'https://dqoncbnvyviurirsdtyu.supabase.co'
const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImRxb25jYm52eXZpdXJpcnNkdHl1Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQxNzc4NDEsImV4cCI6MjA2OTc1Mzg0MX0.gsvrCIlp0NIaCmssExkbslbJjiZJ_A4u5lD0XG_ncY0'

const supabase = createClient(supabaseUrl, supabaseAnonKey)

// Test complet avec un email Hotmail (qui fonctionne)
async function testCompleteRegistrationHotmail() {
  console.log('üöÄ Test complet avec email Hotmail\n')
  
  const testData = {
    email: 'directeur.agence@hotmail.com',
    password: 'MotDePasse123!',
    firstName: 'Jean',
    lastName: 'Kouam',
    phone: '+237691234567',
    agencyName: 'Transport Express Cameroun',
    businessType: 'transport',
    registrationNumber: 'RC/YAO/2024/A/456',
    description: 'Agence de transport interurbain',
    address: '123 Avenue de l\'Ind√©pendance, Yaound√©, Centre, Cameroun'
  }
  
  try {
    console.log('üìù Inscription avec:', testData.email)
    
    // √âtape 1: Inscription
    const { data: authData, error: authError } = await supabase.auth.signUp({
      email: testData.email,
      password: testData.password,
      options: {
        data: {
          first_name: testData.firstName,
          last_name: testData.lastName,
          phone: testData.phone,
          role: 'agence'
        }
      }
    })
    
    if (authError && !authError.message.includes('User already registered')) {
      console.error('‚ùå Erreur d\'inscription:', authError.message)
      return false
    }
    
    let user = authData?.user
    
    // Si l'utilisateur existe d√©j√†, on se connecte
    if (authError?.message.includes('User already registered')) {
      console.log('‚ÑπÔ∏è  Utilisateur existant, connexion...')
      
      const { data: signInData, error: signInError } = await supabase.auth.signInWithPassword({
        email: testData.email,
        password: testData.password
      })
      
      if (signInError) {
        console.error('‚ùå Erreur de connexion:', signInError.message)
        return false
      }
      
      user = signInData.user
      console.log('‚úÖ Connexion r√©ussie')
    } else {
      console.log('‚úÖ Inscription r√©ussie')
    }
    
    if (!user) {
      console.error('‚ùå Aucun utilisateur obtenu')
      return false
    }
    
    console.log('üë§ User ID:', user.id)
    
    // √âtape 2: Cr√©er le profil
    console.log('\nüìã Cr√©ation du profil utilisateur...')
    const { data: profileData, error: profileError } = await supabase
      .from('users')
      .upsert({
        id: user.id,
        email: user.email,
        full_name: `${testData.firstName} ${testData.lastName}`,
        phone: testData.phone,
        role: 'agence'
      })
      .select()
      .single()
    
    if (profileError) {
      console.error('‚ùå Erreur profil:', profileError.message)
      return false
    }
    
    console.log('‚úÖ Profil cr√©√©:', profileData.full_name)
    
    // √âtape 3: Cr√©er l'agence
    console.log('\nüè¢ Cr√©ation de l\'agence...')
    const { data: agencyData, error: agencyError } = await supabase
      .from('agencies')
      .upsert({
        user_id: user.id,
        name: testData.agencyName,
        email: testData.email,
        phone: testData.phone,
        address: testData.address,
        license_number: testData.registrationNumber,
        description: testData.description,
        is_verified: false
      })
      .select()
      .single()
    
    if (agencyError) {
      console.error('‚ùå Erreur agence:', agencyError.message)
      return false
    }
    
    console.log('‚úÖ Agence cr√©√©e:', agencyData.name)
    
    // √âtape 4: V√©rifier les donn√©es
    console.log('\nüîç V√©rification des donn√©es cr√©√©es...')
    
    // R√©cup√©rer l'agence compl√®te
    const { data: fullAgency, error: fetchError } = await supabase
      .from('agencies')
      .select(`
        *,
        users!agencies_user_id_fkey(*)
      `)
      .eq('user_id', user.id)
      .single()
    
    if (fetchError) {
      console.error('‚ùå Erreur de r√©cup√©ration:', fetchError.message)
      return false
    }
    
    console.log('‚úÖ Donn√©es v√©rifi√©es:')
    console.log('  üìß Email:', fullAgency.email)
    console.log('  üè¢ Agence:', fullAgency.name)
    console.log('  üë§ Directeur:', fullAgency.users?.full_name)
    console.log('  üì± T√©l√©phone:', fullAgency.phone)
    console.log('  üè† Adresse:', fullAgency.address)
    console.log('  ‚úÖ V√©rifi√©e:', fullAgency.is_verified ? 'Oui' : 'Non')
    
    return {
      user: user,
      profile: profileData,
      agency: agencyData
    }
    
  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error.message)
    return false
  }
}

// Simuler le processus de votre application
async function simulateAppFlow() {
  console.log('\n' + '='.repeat(60))
  console.log('     SIMULATION DU FLUX D\'INSCRIPTION DE L\'APP')
  console.log('='.repeat(60))
  
  const result = await testCompleteRegistrationHotmail()
  
  if (result) {
    console.log('\nüéâ SUCC√àS COMPLET!')
    console.log('\nüìã R√©sum√© de ce qui a √©t√© cr√©√©:')
    console.log('  1. ‚úÖ Compte utilisateur Supabase')
    console.log('  2. ‚úÖ Profil dans la table "users"')
    console.log('  3. ‚úÖ Agence dans la table "agencies"')
    console.log('  4. ‚úÖ Liaison user ‚Üî agence')
    
    console.log('\nüîß POUR VOTRE APPLICATION:')
    console.log('  1. Utilisez des emails @hotmail.com pour les tests')
    console.log('  2. Le processus d\'inscription fonctionne parfaitement')
    console.log('  3. Apr√®s inscription, l\'utilisateur devrait voir:')
    console.log('     - Le nom de son agence en haut √† droite')
    console.log('     - Son nom et r√¥le')
    console.log('     - Le dashboard de l\'agence')
    
    console.log('\n‚úâÔ∏è  √âTAPE SUIVANTE:')
    console.log('  - V√©rifiez votre bo√Æte email Hotmail')
    console.log('  - Cliquez sur le lien de confirmation')
    console.log('  - Testez la connexion depuis votre app')
    
    return true
  } else {
    console.log('\n‚ùå √âchec - V√©rifiez les logs ci-dessus')
    return false
  }
}

simulateAppFlow().catch(console.error)
