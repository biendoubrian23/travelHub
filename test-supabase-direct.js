import { createClient } from '@supabase/supabase-js'
import dotenv from 'dotenv'

// Charger les variables d'environnement
dotenv.config()

const supabaseUrl = 'https://dqoncbnvyviurirsdtyu.supabase.co'
const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImRxb25jYm52eXZpdXJpcnNkdHl1Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQxNzc4NDEsImV4cCI6MjA2OTc1Mzg0MX0.gsvrCIlp0NIaCmssExkbslbJjiZJ_A4u5lD0XG_ncY0'

const supabase = createClient(supabaseUrl, supabaseAnonKey)

// Test de connexion √† Supabase
async function testSupabaseConnection() {
  console.log('üîç Test de connexion √† Supabase...')
  console.log('URL:', supabaseUrl)
  console.log('Key preview:', supabaseAnonKey.substring(0, 50) + '...')
  
  try {
    // Test 1: V√©rifier la connexion basique
    const { data, error } = await supabase
      .from('users')
      .select('count', { count: 'exact', head: true })
    
    if (error) {
      console.error('‚ùå Erreur de connexion √† Supabase:', error)
      
      if (error.code === 'PGRST116') {
        console.log('‚ÑπÔ∏è  Table "users" existe mais n√©cessite une authentification (RLS activ√©)')
        return true
      }
      
      return false
    }
    
    console.log('‚úÖ Connexion √† Supabase r√©ussie')
    return true
  } catch (err) {
    console.error('‚ùå Erreur lors du test de connexion:', err)
    return false
  }
}

// Test des tables n√©cessaires
async function testTables() {
  console.log('\nüóÑÔ∏è  V√©rification des tables...')
  
  const tables = ['users', 'agencies', 'agency_documents', 'agency_services', 'agency_capabilities']
  
  for (const table of tables) {
    try {
      const { data, error } = await supabase
        .from(table)
        .select('count', { count: 'exact', head: true })
      
      if (error) {
        if (error.code === 'PGRST116') {
          console.log(`‚úÖ Table "${table}" existe (RLS activ√©)`)
        } else if (error.code === '42P01') {
          console.error(`‚ùå Table "${table}" n'existe pas`)
        } else {
          console.error(`‚ùå Table "${table}" erreur:`, error.message)
        }
      } else {
        console.log(`‚úÖ Table "${table}" existe et accessible`)
      }
    } catch (err) {
      console.error(`‚ùå Erreur lors de la v√©rification de la table "${table}":`, err.message)
    }
  }
}

// Test d'inscription simple
async function testRegistration() {
  console.log('\nüìù Test d\'inscription simple...')
  
  const testEmail = `test${Date.now()}@example.com`
  const testPassword = 'TestPassword123!'
  
  try {
    const { data, error } = await supabase.auth.signUp({
      email: testEmail,
      password: testPassword,
      options: {
        data: {
          first_name: 'Test',
          last_name: 'User',
          phone: '+237123456789',
          role: 'agence'
        }
      }
    })
    
    if (error) {
      console.error('‚ùå Erreur lors de l\'inscription test:', error.message)
      
      if (error.message.includes('signup is disabled')) {
        console.log('‚ÑπÔ∏è  L\'inscription publique est d√©sactiv√©e dans Supabase')
      } else if (error.message.includes('email')) {
        console.log('‚ÑπÔ∏è  Probl√®me avec l\'email (peut-√™tre d√©j√† utilis√© ou format invalide)')
      }
      
      return false
    }
    
    console.log('‚úÖ Inscription test r√©ussie pour:', testEmail)
    console.log('üìß User cr√©√©:', data.user?.id)
    console.log('üìß Email confirmation requis:', !data.user?.email_confirmed_at)
    
    return true
  } catch (err) {
    console.error('‚ùå Erreur lors du test d\'inscription:', err.message)
    return false
  }
}

// Test de la version et des param√®tres Supabase
async function testSupabaseStatus() {
  console.log('\n‚öôÔ∏è  Test des param√®tres Supabase...')
  
  try {
    // Test de la session actuelle
    const { data: { session }, error } = await supabase.auth.getSession()
    
    if (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration de la session:', error.message)
    } else {
      console.log('üìã Session actuelle:', session ? 'Connect√©' : 'Non connect√©')
    }
    
    // Test de l'utilisateur actuel
    const { data: { user }, error: userError } = await supabase.auth.getUser()
    
    if (userError) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration de l\'utilisateur:', userError.message)
    } else {
      console.log('üë§ Utilisateur actuel:', user ? user.email : 'Aucun')
    }
    
  } catch (err) {
    console.error('‚ùå Erreur lors du test des param√®tres:', err.message)
  }
}

// Ex√©cuter tous les tests
async function runAllTests() {
  console.log('üöÄ D√©but des tests Supabase\n')
  
  const connectionOk = await testSupabaseConnection()
  
  await testTables()
  await testSupabaseStatus()
  await testRegistration()
  
  console.log('\n‚ú® Tests termin√©s')
  
  if (!connectionOk) {
    console.log('\nüîß Actions recommand√©es:')
    console.log('1. V√©rifiez que votre projet Supabase est actif')
    console.log('2. V√©rifiez les cl√©s API dans le fichier .env')
    console.log('3. Cr√©ez les tables n√©cessaires dans votre base de donn√©es')
    console.log('4. Configurez les politiques RLS si n√©cessaire')
  }
}

// Ex√©cuter les tests
runAllTests().catch(console.error)
