// Script de v√©rification des changements dans l'interface
// √Ä ex√©cuter dans la console du navigateur sur la page des employ√©s

console.log('üîç V√âRIFICATION DES CHANGEMENTS INTERFACE');
console.log('=======================================');

// 1. V√©rifier que la colonne t√©l√©phone est pr√©sente
const headers = Array.from(document.querySelectorAll('.employees-table th')).map(th => th.textContent.trim());
console.log('üìã En-t√™tes du tableau:', headers);

if (headers.includes('T√©l√©phone')) {
  console.log('‚úÖ Colonne t√©l√©phone trouv√©e !');
} else {
  console.log('‚ùå Colonne t√©l√©phone manquante');
}

// 2. V√©rifier le placeholder de recherche
const searchInput = document.querySelector('.search-input');
if (searchInput) {
  console.log('üîç Placeholder de recherche:', searchInput.placeholder);
  if (searchInput.placeholder.includes('t√©l√©phone')) {
    console.log('‚úÖ Placeholder mis √† jour !');
  } else {
    console.log('‚ùå Placeholder non mis √† jour');
  }
} else {
  console.log('‚ùå Champ de recherche non trouv√©');
}

// 3. V√©rifier les donn√©es d'employ√©s affich√©es
const employeeRows = document.querySelectorAll('.employee-row');
console.log(`üë• Nombre d'employ√©s affich√©s: ${employeeRows.length}`);

if (employeeRows.length > 0) {
  const firstRow = employeeRows[0];
  const cells = firstRow.querySelectorAll('td');
  
  console.log('üìä Premi√®re ligne employ√©:');
  console.log('  Nom:', cells[0]?.textContent.trim());
  console.log('  Email:', cells[1]?.textContent.trim());
  console.log('  T√©l√©phone:', cells[2]?.textContent.trim());
  console.log('  R√¥le:', cells[3]?.textContent.trim());
  console.log('  Statut:', cells[4]?.textContent.trim());
  
  // V√©rifier la classe CSS du t√©l√©phone
  const phoneCell = cells[2];
  if (phoneCell && phoneCell.classList.contains('employee-phone')) {
    console.log('‚úÖ Classe CSS t√©l√©phone appliqu√©e !');
  } else {
    console.log('‚ùå Classe CSS t√©l√©phone manquante');
  }
}

// 4. Tester la recherche par t√©l√©phone
if (searchInput && employeeRows.length > 0) {
  console.log('\nüß™ Test de recherche par t√©l√©phone...');
  
  // R√©cup√©rer un num√©ro de t√©l√©phone
  const firstPhoneCell = document.querySelector('.employee-phone');
  if (firstPhoneCell && firstPhoneCell.textContent.trim() !== 'Non renseign√©') {
    const phoneNumber = firstPhoneCell.textContent.trim();
    console.log('üìû Test avec le num√©ro:', phoneNumber);
    
    // Simuler la recherche
    searchInput.value = phoneNumber.substring(0, 4); // Premiers chiffres
    searchInput.dispatchEvent(new Event('input', { bubbles: true }));
    
    setTimeout(() => {
      const visibleRows = document.querySelectorAll('.employee-row:not([style*="display: none"])');
      console.log(`üîç R√©sultats de recherche: ${visibleRows.length} employ√©(s) trouv√©(s)`);
      
      // Remettre la recherche vide
      searchInput.value = '';
      searchInput.dispatchEvent(new Event('input', { bubbles: true }));
    }, 500);
  } else {
    console.log('‚ùå Aucun num√©ro de t√©l√©phone pour tester');
  }
}

// 5. Instructions pour l'utilisateur
console.log('\nüìù POUR VOIR LES CHANGEMENTS:');
console.log('1. V√©rifiez que la colonne "T√©l√©phone" est bien pr√©sente');
console.log('2. Testez la recherche en tapant un num√©ro ou un nom');
console.log('3. Cliquez sur une ligne pour voir les d√©tails complets');
console.log('4. Si rien ne change, rechargez la page (Ctrl+F5)');

// 6. V√©rifier les styles CSS
console.log('\nüé® V√âRIFICATION DES STYLES:');
const phoneElement = document.querySelector('.employee-phone');
if (phoneElement) {
  const styles = window.getComputedStyle(phoneElement);
  console.log('üì± Styles t√©l√©phone:');
  console.log('  Font-family:', styles.fontFamily);
  console.log('  Font-weight:', styles.fontWeight);
  console.log('  Letter-spacing:', styles.letterSpacing);
}

console.log('\n‚ú® V√©rification termin√©e !');
